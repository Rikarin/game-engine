namespace Rin.Editor.RinCompiler;

public static class TokenTypeMap {
    public static readonly IReadOnlyDictionary<string, TokenType> Keywords = new Dictionary<string, TokenType> {
        { "shader", TokenType.Shader },
        { "properties", TokenType.Properties },
        { "pass", TokenType.Pass },
        { "tags", TokenType.Tags },
        { "LOD", TokenType.Lod },
        { "subshader", TokenType.SubShader },
        { "fallback", TokenType.Fallback },
        { "2D", TokenType.Tex2D },
        { "3D", TokenType.Tex3D },
        { "2DArray", TokenType.Tex2DArray },
        { "int", TokenType.Int },
        { "float", TokenType.Float },
        { "range", TokenType.Range },
        { "cube", TokenType.Cube },
        { "cubeArray", TokenType.CubeArray },
        { "color", TokenType.Color },
        { "vector", TokenType.Vector }
    };

    public static readonly IReadOnlyDictionary<string, TokenType> Operators = new Dictionary<string, TokenType> {
        { "/", TokenType.Slash },
        { "/=", TokenType.SlashEqual },
        { ".", TokenType.Dot },
        { "..", TokenType.DotDot },
        { "...", TokenType.DotDotDot },
        { "&", TokenType.Ampersand },
        { "&=", TokenType.AmpersandEqual },
        { "&&", TokenType.AmpersandAmpersand },
        { "|", TokenType.Pipe },
        { "|=", TokenType.PipeEqual },
        { "||", TokenType.PipePipe },
        { "-", TokenType.Minus },
        { "-=", TokenType.MinusEqual },
        { "--", TokenType.MinusMinus },
        { "+", TokenType.Plus },
        { "+=", TokenType.PlusEqual },
        { "++", TokenType.PlusPlus },
        { "<", TokenType.Less },
        { "<=", TokenType.LessEqual },
        { "<<", TokenType.LessLess },
        { "<<=", TokenType.LessLessEqual },
        { ">", TokenType.More },
        { ">=", TokenType.MoreEqual },
        { ">>", TokenType.MoreMore },
        { ">>>", TokenType.MoreMoreMore },
        { ">>=", TokenType.MoreMoreEqual },
        { ">>>=", TokenType.MoreMoreMoreEqual },
        { "!", TokenType.Bang },
        { "!=", TokenType.BangEqual },
        { "!<", TokenType.BangLess },
        { "!<=", TokenType.BangLessEqual },
        { "!>", TokenType.BangMore },
        { "!>=", TokenType.BangMoreEqual },
        { "<>=", TokenType.LessMoreEqual },
        { "!<>=", TokenType.BangLessMoreEqual },
        { "<>", TokenType.LessMore },
        { "!<>", TokenType.BangLessMore },
        { "(", TokenType.OpenParen },
        { ")", TokenType.CloseParen },
        { "[", TokenType.OpenBracket },
        { "]", TokenType.CloseBracket },
        { "{", TokenType.OpenBrace },
        { "}", TokenType.CloseBrace },
        { "?", TokenType.QuestionMark },
        { "??", TokenType.QuestionMarkQuestionMark },
        { "?.", TokenType.QuestionMarkDot },
        { "?[", TokenType.QuestionMarkOpenBracket },
        { ",", TokenType.Comma },
        { ";", TokenType.Semicolon },
        { ":", TokenType.Colon },
        { "->", TokenType.MinusMore },
        { "$", TokenType.Dollar },
        { "=", TokenType.Equal },
        { "==", TokenType.EqualEqual },
        { "*", TokenType.Asterisk },
        { "*=", TokenType.AsteriskEqual },
        { "%", TokenType.Percent },
        { "%=", TokenType.PercentEqual },
        { "^", TokenType.Caret },
        { "^=", TokenType.CaretEqual },
        { "^^", TokenType.CaretCaret },
        { "^^=", TokenType.CaretCaretEqual },
        { "~", TokenType.Tilde },
        { "~=", TokenType.TildeEqual },
        { "=>", TokenType.EqualMore },
        { "#", TokenType.Sharp }
    };
}
